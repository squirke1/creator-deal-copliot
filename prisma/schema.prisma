// Prisma schema for Creator Deal Copilot
// Defines user auth models, deal lifecycle, logging, and task management

generator client {
  provider = "prisma-client-js"
}

// Default to Postgres for relational data and JSON support
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DealStatus {
  DRAFT
  REVIEW
  NEGOTIATING
  APPROVED
  REJECTED
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskType {
  SHOOT
  EDIT
  POST
  CUSTOM
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  deals         Deal[]
  promptLogs    PromptLog[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model Deal {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  brand           String?
  opportunityType String?        // email or contract
  summary         String?
  riskScore       Int?
  fitScore        Int?
  riskFlags       Json?
  deliverables    Json?
  usageRights     Json?
  paymentTerms    Json?
  exclusivity     Json?
  timeline        Json?
  invoice         Invoice?
  tasks           Task[]
  documents       DealDocument[]
  status          DealStatus     @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model DealDocument {
  id          String   @id @default(uuid())
  dealId      String
  deal        Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  type        String   // email or contract
  filename    String
  mimeType    String
  storageKey  String   // S3/MinIO object key
  summary     String?
  extractedAt DateTime @default(now())
  createdAt   DateTime @default(now())
}

model Invoice {
  id           String   @id @default(uuid())
  dealId       String   @unique
  deal         Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  issuedDate   DateTime
  dueDate      DateTime
  totalAmount  Decimal  @db.Decimal(10, 2)
  currency     String   @default("USD")
  lineItems    Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  dealId      String
  deal        Deal       @relation(fields: [dealId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      TaskStatus @default(TODO)
  type        TaskType   @default(CUSTOM)
  dueDate     DateTime?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PromptLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  label     String
  model     String
  prompt    String
  response  String
  metadata  Json?
  createdAt DateTime @default(now())
}

// NextAuth models below

model Account {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
